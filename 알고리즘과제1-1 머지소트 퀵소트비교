#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void Swap(int A[], int a, int b)                                                                        //스왑함수
{
        int temp = A[a];
        A[a] = A[b];
        A[b] = temp;
}

int partition(int A[], int left, int right, int *n)
{
        int pivot = A[left];                                                                                    //피벗은 좌측맨끝
        int low = left + 1;
        int high = right;
        while (low <= high)                                                                                             //교차전까지반복
        {
                while (low <= right && pivot >= A[low])                                         //피벗보다 큰값을 찾을때까지 low를 이동
                {
                        low++;
                        *n+=1;
                }
                while (high >= (left + 1) && pivot <= A[high])                          //피벗보다 큰값을 찾을때까지 high를 이동
                {
                        high--;
                        *n+=1;
                }
                if (low <= high)                                                                                        //교차되지 않은 상태이면 스왑
                {
                        Swap(A, low, high);
                }
        }
        Swap(A, left, high);                                                                                    //피벗이랑 high스왑
        return high;                                                                                                    //옮긴 high값반환

}

int quicksort(int A[], int left, int right)
{
        int n;
        n = 0;                                                                                                                  //0으로 초기화

        if (left <= right)
        {
                int pivot = partition(A, left, right, &n);                                              // 반으로 나눔
                n = n + quicksort(A, left, pivot - 1);                                                          // 왼쪽 정렬
                n = n + quicksort(A, pivot + 1, right);                                                         // 오른쪽 오 쪽정렬
        }

        return n;
}

int merge(int h, int m, int U[], int V[], int S[])
{
        int i, j, k;
        int n;
        int a;
        i = 0;
        j = 0;
        k = 0;
        n = 0;
        while (i < h && j < m)                                                                                  //두 배열을 한 배열에 정리하는코드
        {
                if (U[i] < V[j])
                {
                        S[k] = U[i];
                        i++;
                        n++;
                }
                else
                {
                        S[k] = V[j];
                        j++;
                        n++;
                }
                k++;
        }
        if (i > h)                                                                                                              //두 배열중 하나가 소진되면 나머지를 그대로 채우는 코드
        {
                n++;
                for (a = j; a < m; a++)
                {
                        S[k] = V[a];
                        k++;
                }
        }
        else
        {
                for (a = i; a < h; a++)
                {
                        S[k] = U[a];
                        k++;
                }
        }
        return n;
}

int mergesort(int S[], int size)
{
        int n;
        int h = size / 2;
        int     m = size - h;
        int *U;
        int *V;
        int i;
        n = 0;                                                                                                                  //0으로 초기화

        if (size > 1)
        {
                U = (int *)malloc(h * sizeof(int));                                                     //먼저 새로운 배열 크기에 맞춰 동적할당
                V = (int *)malloc(m * sizeof(int));
                for (i = 0; i < h; i++)
                        U[i] = S[i];                                                                                    //불러온 배열을 나누기
                for (i = h; i < m; i++)
                        V[i] = S[i];
                n = n + mergesort(V, h);                                                                                        //분할정복
                n = n + mergesort(U, m);
                n = n + merge(h, m, U, V, S);                                                           //합치기
        }
        return n;
}

int main()
{
        FILE *fp;
        FILE *fp2;
        int revival, size, quickra, mergera, quickwo, mergewo;
        int *sample;
        int *sample2;
        int i, j;

        srand((unsigned int)time(NULL));
        fp = fopen("input.txt", "r");                                                                   //인풋 읽기전용으로 불러오기
        fp2 = fopen("output1.txt","w");
        if (fp == NULL)
        {
                fprintf(fp2,"읽을수없음\n");                                                                            //읽히지 않으면 오류메세지 출력후 종료
                return 0;
        }
        else
                fprintf(fp2,"                          rand_Merge       worst_Merge       rand_Quick       worst_Quick\n");
                fprintf(fp2,"----------------------------------------------------------------------------------------------\n");
                fscanf(fp, "%d", &revival);                                                                     //첫 입력은 반복횟수
        while (!feof(fp))                                                                                                       //파일이 읽힐때까지
        {
                fscanf(fp, "%d", &size);                                                                        //표본크기값을 받는다.
                mergera = 0;                                                                                            //변수값을 초기화한다
                mergewo = 0;
                quickra = 0;
                quickwo = 0;
                sample = (int *)malloc(size * sizeof(int));                                     //표본크기만큼 동적할당
                sample2 = (int *)malloc(size * sizeof(int));

                for (i = 0; i < revival; i++)                                                   //반복횟수만큼 반복
                {
                        for (j = 0; j < size; j++)
                        {
                                sample[j] = rand();
                                sample2[j] = sample[j];                                                         //랜덤값을구하고 복사본1개를 만든다
                        }
                        mergera = mergera + mergesort(sample, size);                    //랜덤값 머지소트를 돌리고 비교횟수를 구한다
                        quickra = quickra + quicksort(sample2, 0, size - 1);    //랜덤값 퀵소트를 돌리고 비교횟수를 구한다
                }

                mergera = mergera / revival;                                                            //두 결과값을 나눠 평균을 구한다
                quickra = quickra / revival;

                for(i = 0; i < 2; i++)                                                                  //합병정렬의 최악의 경우는 반은 짝수 다음 반은 홀수로 맞추는게 최악의 시간복잡도가나오므로 이 상황을 만든다.
                        for (j = 0; j < size / 2; j++)
                        {
                                sample[j+(i*size/2)] = j * (2 - i) + i;                         //반은 짝수로 반은 홀수로 채운다.
                        }
                mergewo = mergesort(sample, size);                                                      //머지 최악사례에 대한 경우값

                for (i = 0; i < size; i++)                                                              //퀵소트의 최악의경우는 이미 정렬된 값을 계산할때므로 그 상황을 만들어줌
                {
                        sample[i] = i;
                }
                quickwo = quicksort(sample,0,size-1);                                           //퀵 최악사례 경우값
                fprintf(fp2,"%d :                      %d               %d                 %d               %d\n",size,mergera,mergewo,quickra,quickwo);
                free(sample);                                                                                           //출력후 동적할당한거 해방
                free(sample2);
        }
        fclose(fp);
        return 0;
        
}
